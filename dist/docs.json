{
  "api": {
    "name": "MParticleCapacitorPlugin",
    "slug": "mparticlecapacitorplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "echo",
        "signature": "(options: { value: string; }) => Promise<{ value: string; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: string; }"
          }
        ],
        "returns": "Promise<{ value: string; }>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "echo"
      },
      {
        "name": "mParticleConfig",
        "signature": "(call: { isDevelopmentMode?: boolean; planID?: string; planVer?: number; logLevel?: string; identifyRequest?: any; identityCallback?: Function; }) => Promise<MPConfigType>",
        "parameters": [
          {
            "name": "call",
            "docs": "",
            "type": "{ isDevelopmentMode?: boolean | undefined; planID?: string | undefined; planVer?: number | undefined; logLevel?: string | undefined; identifyRequest?: any; identityCallback?: Function | undefined; }"
          }
        ],
        "returns": "Promise<MPConfigType>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "MPConfigType",
          "Function"
        ],
        "slug": "mparticleconfig"
      },
      {
        "name": "mParticleInit",
        "signature": "(call: { key: string; mParticleConfig: any; }) => Promise<any>",
        "parameters": [
          {
            "name": "call",
            "docs": "",
            "type": "{ key: string; mParticleConfig: any; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "mparticleinit"
      },
      {
        "name": "loginMParticleUser",
        "signature": "(call: { email: string; customerId: string; }) => Promise<any>",
        "parameters": [
          {
            "name": "call",
            "docs": "",
            "type": "{ email: string; customerId: string; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "loginmparticleuser"
      },
      {
        "name": "logoutMParticleUser",
        "signature": "(call?: any) => Promise<any>",
        "parameters": [
          {
            "name": "call",
            "docs": "",
            "type": "any"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "logoutmparticleuser"
      },
      {
        "name": "logMParticleEvent",
        "signature": "(call: { eventName: string; eventType: any; eventProperties: any; }) => Promise<any>",
        "parameters": [
          {
            "name": "call",
            "docs": "",
            "type": "{ eventName: string; eventType: any; eventProperties: any; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "logmparticleevent"
      },
      {
        "name": "logMParticlePageView",
        "signature": "(call: { pageName: string; pageLink: any; }) => Promise<any>",
        "parameters": [
          {
            "name": "call",
            "docs": "",
            "type": "{ pageName: string; pageLink: any; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "logmparticlepageview"
      },
      {
        "name": "setUserAttribute",
        "signature": "(call: { attributeName: string; attributeValue: string; }) => Promise<any>",
        "parameters": [
          {
            "name": "call",
            "docs": "",
            "type": "{ attributeName: string; attributeValue: string; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setuserattribute"
      },
      {
        "name": "setUserAttributeList",
        "signature": "(call: { attributeName: string; attributeValues: any; }) => Promise<any>",
        "parameters": [
          {
            "name": "call",
            "docs": "",
            "type": "{ attributeName: string; attributeValues: any; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setuserattributelist"
      },
      {
        "name": "updateMParticleCart",
        "signature": "(call: { productData: any; customAttributes: any; eventType: any; }) => Promise<any>",
        "parameters": [
          {
            "name": "call",
            "docs": "",
            "type": "{ productData: any; customAttributes: any; eventType: any; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "updatemparticlecart"
      },
      {
        "name": "addMParticleProduct",
        "signature": "(call: { productData: any; customAttributes: any; }) => Promise<any>",
        "parameters": [
          {
            "name": "call",
            "docs": "",
            "type": "{ productData: any; customAttributes: any; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "addmparticleproduct"
      },
      {
        "name": "removeMParticleProduct",
        "signature": "(call: { productData: any; customAttributes: any; }) => Promise<any>",
        "parameters": [
          {
            "name": "call",
            "docs": "",
            "type": "{ productData: any; customAttributes: any; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "removemparticleproduct"
      },
      {
        "name": "submitPurchaseEvent",
        "signature": "(call: { productData: any; customAttributes: any; transactionAttributes: any; }) => Promise<any>",
        "parameters": [
          {
            "name": "call",
            "docs": "",
            "type": "{ productData: any; customAttributes: any; transactionAttributes: any; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "submitpurchaseevent"
      },
      {
        "name": "registerMParticleUser",
        "signature": "(call: { email: string; customerId: string; userAttributes: any; }) => Promise<any>",
        "parameters": [
          {
            "name": "call",
            "docs": "",
            "type": "{ email: string; customerId: string; userAttributes: any; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "registermparticleuser"
      }
    ],
    "properties": []
  },
  "interfaces": [
    {
      "name": "Function",
      "slug": "function",
      "docs": "Creates a new function.",
      "tags": [],
      "methods": [
        {
          "name": "apply",
          "signature": "(this: Function, thisArg: any, argArray?: any) => any",
          "parameters": [
            {
              "name": "thisArg",
              "docs": "The object to be used as the this object.",
              "type": "any"
            },
            {
              "name": "argArray",
              "docs": "A set of arguments to be passed to the function.",
              "type": "any"
            }
          ],
          "returns": "any",
          "tags": [
            {
              "name": "param",
              "text": "thisArg The object to be used as the this object."
            },
            {
              "name": "param",
              "text": "argArray A set of arguments to be passed to the function."
            }
          ],
          "docs": "Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.",
          "complexTypes": [
            "Function"
          ],
          "slug": "apply"
        },
        {
          "name": "call",
          "signature": "(this: Function, thisArg: any, ...argArray: any[]) => any",
          "parameters": [
            {
              "name": "thisArg",
              "docs": "The object to be used as the current object.",
              "type": "any"
            },
            {
              "name": "argArray",
              "docs": "A list of arguments to be passed to the method.",
              "type": "any[]"
            }
          ],
          "returns": "any",
          "tags": [
            {
              "name": "param",
              "text": "thisArg The object to be used as the current object."
            },
            {
              "name": "param",
              "text": "argArray A list of arguments to be passed to the method."
            }
          ],
          "docs": "Calls a method of an object, substituting another object for the current object.",
          "complexTypes": [
            "Function"
          ],
          "slug": "call"
        },
        {
          "name": "bind",
          "signature": "(this: Function, thisArg: any, ...argArray: any[]) => any",
          "parameters": [
            {
              "name": "thisArg",
              "docs": "An object to which the this keyword can refer inside the new function.",
              "type": "any"
            },
            {
              "name": "argArray",
              "docs": "A list of arguments to be passed to the new function.",
              "type": "any[]"
            }
          ],
          "returns": "any",
          "tags": [
            {
              "name": "param",
              "text": "thisArg An object to which the this keyword can refer inside the new function."
            },
            {
              "name": "param",
              "text": "argArray A list of arguments to be passed to the new function."
            }
          ],
          "docs": "For a given function, creates a bound function that has the same body as the original function.\r\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.",
          "complexTypes": [
            "Function"
          ],
          "slug": "bind"
        },
        {
          "name": "toString",
          "signature": "() => string",
          "parameters": [],
          "returns": "string",
          "tags": [],
          "docs": "Returns a string representation of a function.",
          "complexTypes": [],
          "slug": "tostring"
        }
      ],
      "properties": [
        {
          "name": "prototype",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "any"
        },
        {
          "name": "length",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "arguments",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "any"
        },
        {
          "name": "caller",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "Function"
          ],
          "type": "Function"
        }
      ]
    }
  ],
  "enums": [],
  "typeAliases": [
    {
      "name": "MPConfigType",
      "slug": "mpconfigtype",
      "docs": "",
      "types": [
        {
          "text": "{\n  isDevelopmentMode?: boolean,\n  dataPlan?: {\n    planId?: string,\n    planVersion?: number\n  },\n  identifyRequest?: any,\n  logLevel?: string,\n  identityCallback?: Function,\n}",
          "complexTypes": [
            "Function"
          ]
        }
      ]
    }
  ],
  "pluginConfigs": []
}